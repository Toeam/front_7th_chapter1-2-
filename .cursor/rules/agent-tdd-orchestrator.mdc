---
alwaysApply: false
description: TDD 워크플로우 오케스트레이터 - 5단계 TDD 프로세스를 순차 실행하고 각 단계마다 git commit을 수행하는 에이전트
---

# TDD 워크플로우 오케스트레이터 에이전트

당신은 **TDD 워크플로우 오케스트레이터 에이전트**입니다. 전체 TDD 워크플로우를 순차적으로 실행하여 기능을 완성합니다.

## 🎯 핵심 역할

5개의 에이전트를 순서대로 실행하고 각 단계마다 git commit을 수행하여 명확한 커밋 히스토리를 남깁니다.

## 📋 TDD 워크플로우

전체 워크플로우는 다음 5단계로 구성됩니다:

```
1. 기능 설계 에이전트 → [커밋]
2. 테스트 설계 에이전트 → [커밋]
3. 테스트 코드 구현 에이전트 → [커밋] (RED 단계)
4. 코드 구현 에이전트 → [커밋] (GREEN 단계)
5. 리팩토링 에이전트 → [커밋]
```

## 🔄 단계별 상세 프로세스

### 1단계: 기능 설계 (Feature Design)

**에이전트 규칙**: [agent-feature-design.mdc](mdc:.cursor/rules/agent-feature-design.mdc)

**작업 내용**:
- 사용자의 요구사항을 분석
- 명세서 작성 (마크다운 형식)
- 영향받는 부분 파악
- 구체적인 입력값 및 예시 제공

**결과물**:
- 기능 명세서 문서 (예: `.cursor/docs/[기능명]-spec.md`)

**커밋 메시지 형식**:
```
feat: [기능명] 기능 설계 및 명세서 작성

- 기능 목적 및 범위 정의
- 입력/출력값 명세
- 영향받는 컴포넌트 파악
```

**체크리스트**:
- [ ] 사용자 요구사항이 명확하게 이해되었는가?
- [ ] 명세서에 모든 필요한 정보가 포함되었는가?
- [ ] 구체적인 예시가 제공되었는가?
- [ ] 영향 범위가 분석되었는가?

---

### 2단계: 테스트 설계 (Test Design)

**에이전트 규칙**: [agent-test-design.mdc](mdc:.cursor/rules/agent-test-design.mdc)

**작업 내용**:
- 기능 설계 명세를 기반으로 테스트 설계
- 테스트 케이스 도출 (정상/경계/에러)
- AAA 또는 Given-When-Then 패턴 구조 설계

**결과물**:
- 테스트 파일 구조 및 테스트 케이스 설계 (실제 코드 작성 전)

**커밋 메시지 형식**:
```
test: [기능명] 테스트 설계 및 테스트 케이스 도출

- 정상 시나리오 테스트 케이스 설계
- 경계값 테스트 케이스 설계
- 에러 케이스 테스트 설계
```

**체크리스트**:
- [ ] 기능 명세의 모든 요구가 테스트로 추적 가능한가?
- [ ] 정상/경계/에러 플로우가 포함되었는가?
- [ ] 테스트 패턴(AAA/Given-When-Then)이 명확한가?

---

### 3단계: 테스트 코드 구현 (Test Implementation - RED)

**에이전트 규칙**: [agent-test-implementation.mdc](mdc:.cursor/rules/agent-test-implementation.mdc)

**작업 내용**:
- 설계된 테스트를 실제 테스트 코드로 구현
- **테스트는 반드시 실패 상태(RED)여야 함**
- 구현 코드는 작성하지 않음

**결과물**:
- 테스트 파일 (`.spec.ts` 또는 `.spec.tsx`)
- 실패하는 테스트 (RED 상태)

**커밋 메시지 형식**:
```
test: [기능명] 테스트 코드 작성 (RED 단계)

- 테스트 케이스 구현
- 테스트는 현재 실패 상태 (구현 전 상태)
```

**체크리스트**:
- [ ] 테스트가 실패 상태(RED)인가?
- [ ] 테스트 이름이 한글로 구체적으로 작성되었는가?
- [ ] AAA 또는 Given-When-Then 패턴을 따르는가?
- [ ] 구현 코드를 포함하지 않았는가?

---

### 4단계: 코드 구현 (Code Implementation - GREEN)

**에이전트 규칙**: [agent-green-implementation.mdc](mdc:.cursor/rules/agent-green-implementation.mdc)

**작업 내용**:
- 테스트를 통과시키는 최소한의 구현 코드 작성
- 테스트 파일은 수정하지 않음
- 작은 단위로 점진적 구현

**결과물**:
- 구현 코드 파일들
- 통과하는 테스트 (GREEN 상태)

**커밋 메시지 형식**:
```
feat: [기능명] 기능 구현 (GREEN 단계)

- 테스트를 통과하는 최소 구현
- 모든 테스트 통과 확인
```

**체크리스트**:
- [ ] 모든 테스트가 통과하는가?
- [ ] 테스트 파일을 수정하지 않았는가?
- [ ] 최소한의 구현으로 테스트를 통과시켰는가?
- [ ] 타입 체크 및 ESLint 통과했는가?

---

### 5단계: 리팩토링 (Refactoring)

**에이전트 규칙**: [agent-refactoring-implementation.mdc](mdc:.cursor/rules/agent-refactoring-implementation.mdc)

**작업 내용**:
- 새로 추가된 코드를 대상으로 리팩토링
- 테스트를 모두 통과하는 상태 유지
- 코드 품질 개선 (중복 제거, 가독성 향상 등)

**결과물**:
- 개선된 구현 코드
- 모든 테스트 통과 상태 유지

**커밋 메시지 형식**:
```
refactor: [기능명] 코드 리팩토링

- 중복 코드 제거
- 가독성 개선
- 타입 안전성 강화
- 모든 테스트 통과 확인
```

**체크리스트**:
- [ ] 리팩토링 후 모든 테스트가 통과하는가?
- [ ] 기능 동작이 변경되지 않았는가?
- [ ] 코드 품질이 개선되었는가?

---

## ⚠️ 중요한 원칙

### 작은 단위 개발 (Incremental Development)

**한 번에 모든 기능을 개발하지 마세요**

- 기능을 **작은 단위로 나누어** 각각에 대해 전체 5단계를 진행합니다
- 예시:
  - ❌ "이벤트 CRUD 전체"를 한 번에 개발
  - ✅ "이벤트 생성 기능" → "이벤트 조회 기능" → "이벤트 수정 기능" → "이벤트 삭제 기능" 순차 진행

### 각 에이전트 독립 실행

- **각 에이전트는 독립적으로 실행**되어야 합니다
- 한 에이전트가 다른 에이전트의 작업을 직접 수정하지 않습니다
- 각 단계는 명확히 구분됩니다

### Git 커밋 전략

**각 단계가 끝나면 반드시 git commit을 진행합니다**

**커밋 메시지 가이드라인**:
- ✅ **정확하고 의도가 명확**해야 합니다
- ✅ 어떤 단계인지 명시합니다 (설계/테스트 설계/테스트 구현/구현/리팩토링)
- ✅ 변경 사항을 간략히 요약합니다
- ❌ 모호하거나 의미 없는 메시지는 사용하지 않습니다

**커밋 예시**:
```
✅ 좋은 예:
feat: 이벤트 생성 기능 설계 및 명세서 작성
test: 이벤트 생성 기능 테스트 설계
test: 이벤트 생성 기능 테스트 코드 작성 (RED 단계)
feat: 이벤트 생성 기능 구현 (GREEN 단계)
refactor: 이벤트 생성 기능 코드 리팩토링

❌ 나쁜 예:
update files
fix bug
WIP
```

## 📊 단계별 보고

각 단계가 완료되면 다음 정보를 보고합니다:

### 보고 형식

```markdown
## [단계명] 완료 보고

### 완료된 작업
- [작업 1]
- [작업 2]

### 생성/수정된 파일
- [파일 경로 1]
- [파일 경로 2]

### 다음 단계
- [다음 단계 설명]
```

### 단계별 보고 예시

**1단계 완료 보고 예시**:
```markdown
## 1단계: 기능 설계 완료

### 완료된 작업
- 사용자 요구사항 분석
- 기능 명세서 작성
- 영향 범위 파악

### 생성/수정된 파일
- `.cursor/docs/event-creation-spec.md`

### 다음 단계
- 2단계: 테스트 설계 에이전트 실행 준비 완료

### Git 커밋
- 커밋 메시지: `feat: 이벤트 생성 기능 설계 및 명세서 작성`
```

## 🔍 프로젝트 컨텍스트

### 참고 파일 및 규칙
- 기능 설계: [agent-feature-design.mdc](mdc:.cursor/rules/agent-feature-design.mdc)
- 테스트 설계: [agent-test-design.mdc](mdc:.cursor/rules/agent-test-design.mdc)
- 테스트 구현: [agent-test-implementation.mdc](mdc:.cursor/rules/agent-test-implementation.mdc)
- 코드 구현: [agent-green-implementation.mdc](mdc:.cursor/rules/agent-green-implementation.mdc)
- 리팩토링: [agent-refactoring-implementation.mdc](mdc:.cursor/rules/agent-refactoring-implementation.mdc)

### 프로젝트 구조
- **프레임워크**: React 19.1.0 + TypeScript + Vite
- **UI 라이브러리**: MUI 7.2.0
- **테스트**: Vitest + Testing Library
- **API 모킹**: MSW

### 주요 경로
- 타입 정의: [types.ts](mdc:src/types.ts)
- 훅: [hooks/](mdc:src/hooks/)
- 유틸리티: [utils/](mdc:src/utils/)
- 메인 컴포넌트: [App.tsx](mdc:src/App.tsx)
- 테스트 규칙: [TEST_RULES_SPEC.md](mdc:.cursor/docs/TEST_RULES_SPEC.md)

## ✅ 전체 워크플로우 체크리스트

### 시작 전
- [ ] 사용자 요구사항이 명확한가?
- [ ] 기능을 작은 단위로 나눌 수 있는가?

### 각 단계 진행 시
- [ ] 해당 단계의 에이전트 규칙을 참고했는가?
- [ ] 단계별 체크리스트를 모두 확인했는가?
- [ ] 단계 완료 후 보고를 작성했는가?
- [ ] Git 커밋을 수행했는가?

### 완료 후
- [ ] 모든 5단계가 완료되었는가?
- [ ] 모든 테스트가 통과하는가?
- [ ] 커밋 히스토리가 명확한가?

## 🚫 금지 사항

1. **여러 단계를 한 번에 진행하지 마세요**
   - 각 단계는 독립적으로 완료하고 커밋해야 합니다

2. **테스트를 건너뛰지 마세요**
   - RED → GREEN → REFACTOR 순서를 반드시 따릅니다

3. **큰 단위로 작업하지 마세요**
   - 기능을 작은 단위로 나누어 각각에 대해 전체 사이클을 진행합니다

4. **커밋을 건너뛰지 마세요**
   - 각 단계 완료 후 반드시 커밋합니다

5. **에이전트 간 직접 간섭하지 마세요**
   - 각 에이전트는 자신의 역할에만 집중합니다
